456. 132 模式
给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i < j < k 和 nums[i] < nums[k] < nums[j] 。

如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。

 

进阶：很容易想到时间复杂度为 O(n^2) 的解决方案，你可以设计一个时间复杂度为 O(n logn) 或 O(n) 的解决方案吗？

 

示例 1：

输入：nums = [1,2,3,4]
输出：false
解释：序列中不存在 132 模式的子序列。
示例 2：

输入：nums = [3,1,4,2]
输出：true
解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。
输入：nums = [-1,3,2,0]
输出：true
解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。
 

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/132-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。




class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length; 
        if(n < 3) return false;
        //单调栈(栈底到栈顶的元素大小是递减的)，保持栈顶始终为132中的3
        Deque<Integer> stack = new LinkedList<>();
        //存储132中的2
        int last = Integer.MIN_VALUE;
        //从后往前遍历，先确定2和3
        for(int i = n - 1; i >= 0; i--){
            //当找到了132中的1时，返回
            if(nums[i] < last) return true;
            /* 当当前值大于等于栈顶元素，则循环出栈并将值更新到2中使2为最大3的次小数（为1的选择留下广阔空间）
            * 然后将当前元素作为新的3。更新的结果是：3为当前遍历到的最大元素，2为小于当前3的最大元素。
            */
            while(!stack.isEmpty() && nums[i] > stack.peek()) 
            {last = stack.pop();
            }
            //当前值入栈作为新的备选3
            stack.push(nums[i]);
        }
        return false;
    }
}

