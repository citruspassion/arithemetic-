import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

class  man{
  static Stack<String> stack=new Stack<String>();
 static    List<String>list=new LinkedList<>();
    public static void main(String[] args) {
        String s="0-2147483647";
        StringBuilder sb=new StringBuilder();
        for (int i = 0; i <s.length() ; i++) {
            if (s.charAt(i)!=' ')
            {
                sb.append(s.charAt(i));
            }
        }
        String ss=sb.toString();

        String tmp;
        for (int i = 0; i <ss.length() ; i++) {
         String a=String.valueOf(s.charAt(i));
              if (a.equals('('))
              {
                  stack.push(a);
              }else if (a.equals(')'))
              {
                  while (!stack.isEmpty()&&!stack.peek().equals('('))
                  {
                    list.add(stack.pop());
                  }
              }else if (Character.isDigit(s.charAt(i)))
              {
                  String str="";
                        while (i<ss.length()&&Character.isDigit(s.charAt(i)))
                        {
                            str+=String.valueOf(s.charAt(i));
                            i++;
                        }
                        if (i!=ss.length())
                        {
                            i--;
                        }
                        list.add(str);
              }else{
                  if (!stack.isEmpty()&&getProperty(tmp=(stack.peek()))>getProperty(a))
                  {
                      list.add(tmp);
                      stack.pop();
                  }
                  stack.push(a);
              }
              while (!stack.isEmpty())
              {
                  list.add(stack.pop());
              }

        }
        String[] strings = list.toArray(new String[list.size()]);
        int i = evalRPN(strings);

    }
    public static  int evalRPN(String[] tokens)
    {
        Stack<Integer>stack=new Stack<>();
        for (int i = 0; i <tokens.length ; i++) {
            String s=tokens[i];
            int b=0;
            int a=0;
            int tmp=0;
           if (s.equals("+"))
           {
               b=stack.pop();
               a=stack.pop();
               tmp=a+b;
               stack.push(tmp);

           }else if (s.equals("-"))
           {
               b=stack.pop();
               a=stack.pop();
               tmp=a-b;
               stack.push(tmp);

           }else if (s.equals("*"))
           {
               b=stack.pop();
               a=stack.pop();
               tmp=a*b;
               stack.push(tmp);

           }else if (s.equals("/"))
           {

               b=stack.pop();
               a=stack.pop();
               tmp=a/b;
               stack.push(tmp);
           }else{
                    stack.push(Integer.parseInt(s));
           }
        }
        return  stack.pop();
    }
    public static int getProperty(String op)
    {
        switch (op){
            case "+":
            case"-":
                return 1;
            case "*":
            case "/":
                return 2;
            default:
                return  0;
        }
    }
}
