question No.697  in leetcode

 Description of this question:
 
 Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

 Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
 
 
 Solution:
 We must find some elemens in this array which have a mafximum frequency.Like [1,2,2,1,3] ,and we can find that there are 2 numbers which appear twice.
 And abviously we should choose a number which has the shortest distance from the first occurence to the last occurence.So the answer of it is the number 2.
 
 To solve this question,we can use hashmap.And it's better to use the numbers of this array as the key of hashmap.
 For the value, a array which has three items and contains the number of occurrences 
 ,the index of the first occurrence and the index of last occurence  would have a greater performance.
 
 
 
 
 
 class Solution {
    public int findShortestSubArray(int[] nums) {
     Map<Integer,int []>map=new HashMap<Integer,int[]>();
     for(int i=0;i<nums.length;i++)                  //
     {
     
         if(map.containsKey(nums[i]))
         {
             map.get(nums[i])[0]++;     //[0] which represents a number of occurrences
             map.get(nums[i])[2]=i;     //[2] which represents a index of last occurrence of the number 
         }else{
             map.put(nums[i],new int[]{1,i,i});      
         }
     }
     int temp=0;
     int len=0;
     for(Map.Entry<Integer,int []> entry:map.entrySet())
     {
         int arr[]=entry.getValue();
         if(temp<arr[0])                             //we can use temp to swap 
           {
               temp=arr[0];
               len=arr[2]-arr[1]+1;
           } 
           if(temp==arr[0])
           {                                                     //like the example above, if some numbers have the same 
                                                                 //  frequncey of occurence,we can compare which of it has a shorter distance.
               if(len>arr[2]-arr[1]+1)
               {
                   len=arr[2]-arr[1]+1;
               }
           }
     }
     return len;
}
}
