question No.697  in leetcode

 Description of this question:
 
 Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

 Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
 
 
 Solution:
 We must find some elemens in this array which have a maximum frequency.Like [1,2,2,1,3] ,we can find that there are 2 numbers which appear for two times.
 
 And abviously we should choose the smallest 
 To solve this question,we can use hashmap.
 class Solution {
    public int findShortestSubArray(int[] nums) {
     Map<Integer,int []>map=new HashMap<Integer,int[]>();
     for(int i=0;i<nums.length;i++)
     {
     
         if(map.containsKey(nums[i]))
         {
             map.get(nums[i])[0]++;
             map.get(nums[i])[2]=i;
         }else{
             map.put(nums[i],new int[]{1,i,i});
         }
     }
     int temp=0;
     int len=0;
     for(Map.Entry<Integer,int []> entry:map.entrySet())
     {
         int arr[]=entry.getValue();
         if(temp<arr[0])
           {
               temp=arr[0];
               len=arr[2]-arr[1]+1;
           }
           if(temp==arr[0])
           {
               if(len>arr[2]-arr[1]+1)
               {
                   len=arr[2]-arr[1]+1;
               }
           }
     }
     return len;
}
}
